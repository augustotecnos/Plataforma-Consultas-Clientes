version: '3.8'

services:
  # Backend Services
  postgres:
    image: postgres:15-alpine
    container_name: customer_db_dev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: customer_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - customer_network

  redis:
    image: redis:7-alpine
    container_name: customer_cache_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - customer_network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: customer_api_dev
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_SERVER=postgres
      - REDIS_HOST=redis
      - DEBUG=True
    volumes:
      - ./backend/src:/app/src
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - customer_network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      target: development
    container_name: customer_portal_dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8000
    stdin_open: true
    tty: true
    depends_on:
      - api
    networks:
      - customer_network

volumes:
  postgres_data:
  redis_data:

networks:
  customer_network:
    driver: bridge
